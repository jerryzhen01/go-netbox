/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.9 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"time"
)

// checks if the JobRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobRequest{}

// JobRequest struct for JobRequest
type JobRequest struct {
	Completed            NullableTime `json:"completed,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _JobRequest JobRequest

// NewJobRequest instantiates a new JobRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobRequest() *JobRequest {
	this := JobRequest{}
	return &this
}

// NewJobRequestWithDefaults instantiates a new JobRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobRequestWithDefaults() *JobRequest {
	this := JobRequest{}
	return &this
}

// GetCompleted returns the Completed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobRequest) GetCompleted() time.Time {
	if o == nil || IsNil(o.Completed.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Completed.Get()
}

// GetCompletedOk returns a tuple with the Completed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobRequest) GetCompletedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Completed.Get(), o.Completed.IsSet()
}

// HasCompleted returns a boolean if a field has been set.
func (o *JobRequest) HasCompleted() bool {
	if o != nil && o.Completed.IsSet() {
		return true
	}

	return false
}

// SetCompleted gets a reference to the given NullableTime and assigns it to the Completed field.
func (o *JobRequest) SetCompleted(v time.Time) {
	o.Completed.Set(&v)
}

// SetCompletedNil sets the value for Completed to be an explicit nil
func (o *JobRequest) SetCompletedNil() {
	o.Completed.Set(nil)
}

// UnsetCompleted ensures that no value is present for Completed, not even an explicit nil
func (o *JobRequest) UnsetCompleted() {
	o.Completed.Unset()
}

func (o JobRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Completed.IsSet() {
		toSerialize["completed"] = o.Completed.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *JobRequest) UnmarshalJSON(data []byte) (err error) {
	varJobRequest := _JobRequest{}

	err = json.Unmarshal(data, &varJobRequest)

	if err != nil {
		return err
	}

	*o = JobRequest(varJobRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "completed")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJobRequest struct {
	value *JobRequest
	isSet bool
}

func (v NullableJobRequest) Get() *JobRequest {
	return v.value
}

func (v *NullableJobRequest) Set(val *JobRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableJobRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableJobRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobRequest(val *JobRequest) *NullableJobRequest {
	return &NullableJobRequest{value: val, isSet: true}
}

func (v NullableJobRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
