/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.9 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// PatchedWritableLocationRequestStatus * `planned` - Planned * `staging` - Staging * `active` - Active * `decommissioning` - Decommissioning * `retired` - Retired
type PatchedWritableLocationRequestStatus string

// List of PatchedWritableLocationRequest_status
const (
	PATCHEDWRITABLELOCATIONREQUESTSTATUS_PLANNED         PatchedWritableLocationRequestStatus = "planned"
	PATCHEDWRITABLELOCATIONREQUESTSTATUS_STAGING         PatchedWritableLocationRequestStatus = "staging"
	PATCHEDWRITABLELOCATIONREQUESTSTATUS_ACTIVE          PatchedWritableLocationRequestStatus = "active"
	PATCHEDWRITABLELOCATIONREQUESTSTATUS_DECOMMISSIONING PatchedWritableLocationRequestStatus = "decommissioning"
	PATCHEDWRITABLELOCATIONREQUESTSTATUS_RETIRED         PatchedWritableLocationRequestStatus = "retired"
)

// All allowed values of PatchedWritableLocationRequestStatus enum
var AllowedPatchedWritableLocationRequestStatusEnumValues = []PatchedWritableLocationRequestStatus{
	"planned",
	"staging",
	"active",
	"decommissioning",
	"retired",
}

func (v *PatchedWritableLocationRequestStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PatchedWritableLocationRequestStatus(value)
	for _, existing := range AllowedPatchedWritableLocationRequestStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PatchedWritableLocationRequestStatus", value)
}

// NewPatchedWritableLocationRequestStatusFromValue returns a pointer to a valid PatchedWritableLocationRequestStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPatchedWritableLocationRequestStatusFromValue(v string) (*PatchedWritableLocationRequestStatus, error) {
	ev := PatchedWritableLocationRequestStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PatchedWritableLocationRequestStatus: valid values are %v", v, AllowedPatchedWritableLocationRequestStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PatchedWritableLocationRequestStatus) IsValid() bool {
	for _, existing := range AllowedPatchedWritableLocationRequestStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PatchedWritableLocationRequest_status value
func (v PatchedWritableLocationRequestStatus) Ptr() *PatchedWritableLocationRequestStatus {
	return &v
}

type NullablePatchedWritableLocationRequestStatus struct {
	value *PatchedWritableLocationRequestStatus
	isSet bool
}

func (v NullablePatchedWritableLocationRequestStatus) Get() *PatchedWritableLocationRequestStatus {
	return v.value
}

func (v *NullablePatchedWritableLocationRequestStatus) Set(val *PatchedWritableLocationRequestStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedWritableLocationRequestStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedWritableLocationRequestStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedWritableLocationRequestStatus(val *PatchedWritableLocationRequestStatus) *NullablePatchedWritableLocationRequestStatus {
	return &NullablePatchedWritableLocationRequestStatus{value: val, isSet: true}
}

func (v NullablePatchedWritableLocationRequestStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedWritableLocationRequestStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
