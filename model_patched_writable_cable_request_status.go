/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.9 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// PatchedWritableCableRequestStatus * `connected` - Connected * `planned` - Planned * `decommissioning` - Decommissioning
type PatchedWritableCableRequestStatus string

// List of PatchedWritableCableRequest_status
const (
	PATCHEDWRITABLECABLEREQUESTSTATUS_CONNECTED       PatchedWritableCableRequestStatus = "connected"
	PATCHEDWRITABLECABLEREQUESTSTATUS_PLANNED         PatchedWritableCableRequestStatus = "planned"
	PATCHEDWRITABLECABLEREQUESTSTATUS_DECOMMISSIONING PatchedWritableCableRequestStatus = "decommissioning"
)

// All allowed values of PatchedWritableCableRequestStatus enum
var AllowedPatchedWritableCableRequestStatusEnumValues = []PatchedWritableCableRequestStatus{
	"connected",
	"planned",
	"decommissioning",
}

func (v *PatchedWritableCableRequestStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PatchedWritableCableRequestStatus(value)
	for _, existing := range AllowedPatchedWritableCableRequestStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PatchedWritableCableRequestStatus", value)
}

// NewPatchedWritableCableRequestStatusFromValue returns a pointer to a valid PatchedWritableCableRequestStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPatchedWritableCableRequestStatusFromValue(v string) (*PatchedWritableCableRequestStatus, error) {
	ev := PatchedWritableCableRequestStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PatchedWritableCableRequestStatus: valid values are %v", v, AllowedPatchedWritableCableRequestStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PatchedWritableCableRequestStatus) IsValid() bool {
	for _, existing := range AllowedPatchedWritableCableRequestStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PatchedWritableCableRequest_status value
func (v PatchedWritableCableRequestStatus) Ptr() *PatchedWritableCableRequestStatus {
	return &v
}

type NullablePatchedWritableCableRequestStatus struct {
	value *PatchedWritableCableRequestStatus
	isSet bool
}

func (v NullablePatchedWritableCableRequestStatus) Get() *PatchedWritableCableRequestStatus {
	return v.value
}

func (v *NullablePatchedWritableCableRequestStatus) Set(val *PatchedWritableCableRequestStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedWritableCableRequestStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedWritableCableRequestStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedWritableCableRequestStatus(val *PatchedWritableCableRequestStatus) *NullablePatchedWritableCableRequestStatus {
	return &NullablePatchedWritableCableRequestStatus{value: val, isSet: true}
}

func (v NullablePatchedWritableCableRequestStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedWritableCableRequestStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
