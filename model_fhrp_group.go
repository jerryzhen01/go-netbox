/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.9 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// checks if the FHRPGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FHRPGroup{}

// FHRPGroup Adds support for custom fields and tags.
type FHRPGroup struct {
	Id                   int32             `json:"id"`
	Url                  string            `json:"url"`
	Display              string            `json:"display"`
	Protocol             FHRPGroupProtocol `json:"protocol"`
	GroupId              int32             `json:"group_id"`
	Description          *string           `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FHRPGroup FHRPGroup

// NewFHRPGroup instantiates a new FHRPGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFHRPGroup(id int32, url string, display string, protocol FHRPGroupProtocol, groupId int32) *FHRPGroup {
	this := FHRPGroup{}
	this.Id = id
	this.Url = url
	this.Display = display
	this.Protocol = protocol
	this.GroupId = groupId
	return &this
}

// NewFHRPGroupWithDefaults instantiates a new FHRPGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFHRPGroupWithDefaults() *FHRPGroup {
	this := FHRPGroup{}
	return &this
}

// GetId returns the Id field value
func (o *FHRPGroup) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FHRPGroup) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FHRPGroup) SetId(v int32) {
	o.Id = v
}

// GetUrl returns the Url field value
func (o *FHRPGroup) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *FHRPGroup) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *FHRPGroup) SetUrl(v string) {
	o.Url = v
}

// GetDisplay returns the Display field value
func (o *FHRPGroup) GetDisplay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *FHRPGroup) GetDisplayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *FHRPGroup) SetDisplay(v string) {
	o.Display = v
}

// GetProtocol returns the Protocol field value
func (o *FHRPGroup) GetProtocol() FHRPGroupProtocol {
	if o == nil {
		var ret FHRPGroupProtocol
		return ret
	}

	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
func (o *FHRPGroup) GetProtocolOk() (*FHRPGroupProtocol, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protocol, true
}

// SetProtocol sets field value
func (o *FHRPGroup) SetProtocol(v FHRPGroupProtocol) {
	o.Protocol = v
}

// GetGroupId returns the GroupId field value
func (o *FHRPGroup) GetGroupId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *FHRPGroup) GetGroupIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *FHRPGroup) SetGroupId(v int32) {
	o.GroupId = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FHRPGroup) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FHRPGroup) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FHRPGroup) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FHRPGroup) SetDescription(v string) {
	o.Description = &v
}

func (o FHRPGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FHRPGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["url"] = o.Url
	toSerialize["display"] = o.Display
	toSerialize["protocol"] = o.Protocol
	toSerialize["group_id"] = o.GroupId
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FHRPGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"url",
		"display",
		"protocol",
		"group_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFHRPGroup := _FHRPGroup{}

	err = json.Unmarshal(data, &varFHRPGroup)

	if err != nil {
		return err
	}

	*o = FHRPGroup(varFHRPGroup)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "url")
		delete(additionalProperties, "display")
		delete(additionalProperties, "protocol")
		delete(additionalProperties, "group_id")
		delete(additionalProperties, "description")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFHRPGroup struct {
	value *FHRPGroup
	isSet bool
}

func (v NullableFHRPGroup) Get() *FHRPGroup {
	return v.value
}

func (v *NullableFHRPGroup) Set(val *FHRPGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableFHRPGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableFHRPGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFHRPGroup(val *FHRPGroup) *NullableFHRPGroup {
	return &NullableFHRPGroup{value: val, isSet: true}
}

func (v NullableFHRPGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFHRPGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
