/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.9 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// DataSourceRequestType * `None` - --------- * `local` - Local * `git` - Git * `amazon-s3` - Amazon S3
type DataSourceRequestType string

// List of DataSourceRequest_type
const (
	DATASOURCEREQUESTTYPE_LOCAL     DataSourceRequestType = "local"
	DATASOURCEREQUESTTYPE_GIT       DataSourceRequestType = "git"
	DATASOURCEREQUESTTYPE_AMAZON_S3 DataSourceRequestType = "amazon-s3"
)

// All allowed values of DataSourceRequestType enum
var AllowedDataSourceRequestTypeEnumValues = []DataSourceRequestType{
	"local",
	"git",
	"amazon-s3",
}

func (v *DataSourceRequestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataSourceRequestType(value)
	for _, existing := range AllowedDataSourceRequestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataSourceRequestType", value)
}

// NewDataSourceRequestTypeFromValue returns a pointer to a valid DataSourceRequestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataSourceRequestTypeFromValue(v string) (*DataSourceRequestType, error) {
	ev := DataSourceRequestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataSourceRequestType: valid values are %v", v, AllowedDataSourceRequestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataSourceRequestType) IsValid() bool {
	for _, existing := range AllowedDataSourceRequestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataSourceRequest_type value
func (v DataSourceRequestType) Ptr() *DataSourceRequestType {
	return &v
}

type NullableDataSourceRequestType struct {
	value *DataSourceRequestType
	isSet bool
}

func (v NullableDataSourceRequestType) Get() *DataSourceRequestType {
	return v.value
}

func (v *NullableDataSourceRequestType) Set(val *DataSourceRequestType) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSourceRequestType) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSourceRequestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSourceRequestType(val *DataSourceRequestType) *NullableDataSourceRequestType {
	return &NullableDataSourceRequestType{value: val, isSet: true}
}

func (v NullableDataSourceRequestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSourceRequestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
