/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.9 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// WirelessLinkStatusLabel the model 'WirelessLinkStatusLabel'
type WirelessLinkStatusLabel string

// List of WirelessLink_status_label
const (
	WIRELESSLINKSTATUSLABEL_CONNECTED       WirelessLinkStatusLabel = "Connected"
	WIRELESSLINKSTATUSLABEL_PLANNED         WirelessLinkStatusLabel = "Planned"
	WIRELESSLINKSTATUSLABEL_DECOMMISSIONING WirelessLinkStatusLabel = "Decommissioning"
)

// All allowed values of WirelessLinkStatusLabel enum
var AllowedWirelessLinkStatusLabelEnumValues = []WirelessLinkStatusLabel{
	"Connected",
	"Planned",
	"Decommissioning",
}

func (v *WirelessLinkStatusLabel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WirelessLinkStatusLabel(value)
	for _, existing := range AllowedWirelessLinkStatusLabelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WirelessLinkStatusLabel", value)
}

// NewWirelessLinkStatusLabelFromValue returns a pointer to a valid WirelessLinkStatusLabel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWirelessLinkStatusLabelFromValue(v string) (*WirelessLinkStatusLabel, error) {
	ev := WirelessLinkStatusLabel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WirelessLinkStatusLabel: valid values are %v", v, AllowedWirelessLinkStatusLabelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WirelessLinkStatusLabel) IsValid() bool {
	for _, existing := range AllowedWirelessLinkStatusLabelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WirelessLink_status_label value
func (v WirelessLinkStatusLabel) Ptr() *WirelessLinkStatusLabel {
	return &v
}

type NullableWirelessLinkStatusLabel struct {
	value *WirelessLinkStatusLabel
	isSet bool
}

func (v NullableWirelessLinkStatusLabel) Get() *WirelessLinkStatusLabel {
	return v.value
}

func (v *NullableWirelessLinkStatusLabel) Set(val *WirelessLinkStatusLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableWirelessLinkStatusLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableWirelessLinkStatusLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWirelessLinkStatusLabel(val *WirelessLinkStatusLabel) *NullableWirelessLinkStatusLabel {
	return &NullableWirelessLinkStatusLabel{value: val, isSet: true}
}

func (v NullableWirelessLinkStatusLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWirelessLinkStatusLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
