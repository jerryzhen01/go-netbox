/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.9 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// DeviceWithConfigContextStatusValue * `offline` - Offline * `active` - Active * `planned` - Planned * `staged` - Staged * `failed` - Failed * `inventory` - Inventory * `decommissioning` - Decommissioning
type DeviceWithConfigContextStatusValue string

// List of DeviceWithConfigContext_status_value
const (
	DEVICEWITHCONFIGCONTEXTSTATUSVALUE_OFFLINE DeviceWithConfigContextStatusValue = "offline"
	DEVICEWITHCONFIGCONTEXTSTATUSVALUE_ACTIVE DeviceWithConfigContextStatusValue = "active"
	DEVICEWITHCONFIGCONTEXTSTATUSVALUE_PLANNED DeviceWithConfigContextStatusValue = "planned"
	DEVICEWITHCONFIGCONTEXTSTATUSVALUE_STAGED DeviceWithConfigContextStatusValue = "staged"
	DEVICEWITHCONFIGCONTEXTSTATUSVALUE_FAILED DeviceWithConfigContextStatusValue = "failed"
	DEVICEWITHCONFIGCONTEXTSTATUSVALUE_INVENTORY DeviceWithConfigContextStatusValue = "inventory"
	DEVICEWITHCONFIGCONTEXTSTATUSVALUE_DECOMMISSIONING DeviceWithConfigContextStatusValue = "decommissioning"
)

// All allowed values of DeviceWithConfigContextStatusValue enum
var AllowedDeviceWithConfigContextStatusValueEnumValues = []DeviceWithConfigContextStatusValue{
	"offline",
	"active",
	"planned",
	"staged",
	"failed",
	"inventory",
	"decommissioning",
}

func (v *DeviceWithConfigContextStatusValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeviceWithConfigContextStatusValue(value)
	for _, existing := range AllowedDeviceWithConfigContextStatusValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeviceWithConfigContextStatusValue", value)
}

// NewDeviceWithConfigContextStatusValueFromValue returns a pointer to a valid DeviceWithConfigContextStatusValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeviceWithConfigContextStatusValueFromValue(v string) (*DeviceWithConfigContextStatusValue, error) {
	ev := DeviceWithConfigContextStatusValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeviceWithConfigContextStatusValue: valid values are %v", v, AllowedDeviceWithConfigContextStatusValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeviceWithConfigContextStatusValue) IsValid() bool {
	for _, existing := range AllowedDeviceWithConfigContextStatusValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeviceWithConfigContext_status_value value
func (v DeviceWithConfigContextStatusValue) Ptr() *DeviceWithConfigContextStatusValue {
	return &v
}

type NullableDeviceWithConfigContextStatusValue struct {
	value *DeviceWithConfigContextStatusValue
	isSet bool
}

func (v NullableDeviceWithConfigContextStatusValue) Get() *DeviceWithConfigContextStatusValue {
	return v.value
}

func (v *NullableDeviceWithConfigContextStatusValue) Set(val *DeviceWithConfigContextStatusValue) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceWithConfigContextStatusValue) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceWithConfigContextStatusValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceWithConfigContextStatusValue(val *DeviceWithConfigContextStatusValue) *NullableDeviceWithConfigContextStatusValue {
	return &NullableDeviceWithConfigContextStatusValue{value: val, isSet: true}
}

func (v NullableDeviceWithConfigContextStatusValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceWithConfigContextStatusValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

