/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.9 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// PatchedWritableCableRequestType * `cat3` - CAT3 * `cat5` - CAT5 * `cat5e` - CAT5e * `cat6` - CAT6 * `cat6a` - CAT6a * `cat7` - CAT7 * `cat7a` - CAT7a * `cat8` - CAT8 * `dac-active` - Direct Attach Copper (Active) * `dac-passive` - Direct Attach Copper (Passive) * `mrj21-trunk` - MRJ21 Trunk * `coaxial` - Coaxial * `mmf` - Multimode Fiber * `mmf-om1` - Multimode Fiber (OM1) * `mmf-om2` - Multimode Fiber (OM2) * `mmf-om3` - Multimode Fiber (OM3) * `mmf-om4` - Multimode Fiber (OM4) * `mmf-om5` - Multimode Fiber (OM5) * `smf` - Singlemode Fiber * `smf-os1` - Singlemode Fiber (OS1) * `smf-os2` - Singlemode Fiber (OS2) * `aoc` - Active Optical Cabling (AOC) * `power` - Power
type PatchedWritableCableRequestType string

// List of PatchedWritableCableRequest_type
const (
	PATCHEDWRITABLECABLEREQUESTTYPE_CAT3        PatchedWritableCableRequestType = "cat3"
	PATCHEDWRITABLECABLEREQUESTTYPE_CAT5        PatchedWritableCableRequestType = "cat5"
	PATCHEDWRITABLECABLEREQUESTTYPE_CAT5E       PatchedWritableCableRequestType = "cat5e"
	PATCHEDWRITABLECABLEREQUESTTYPE_CAT6        PatchedWritableCableRequestType = "cat6"
	PATCHEDWRITABLECABLEREQUESTTYPE_CAT6A       PatchedWritableCableRequestType = "cat6a"
	PATCHEDWRITABLECABLEREQUESTTYPE_CAT7        PatchedWritableCableRequestType = "cat7"
	PATCHEDWRITABLECABLEREQUESTTYPE_CAT7A       PatchedWritableCableRequestType = "cat7a"
	PATCHEDWRITABLECABLEREQUESTTYPE_CAT8        PatchedWritableCableRequestType = "cat8"
	PATCHEDWRITABLECABLEREQUESTTYPE_DAC_ACTIVE  PatchedWritableCableRequestType = "dac-active"
	PATCHEDWRITABLECABLEREQUESTTYPE_DAC_PASSIVE PatchedWritableCableRequestType = "dac-passive"
	PATCHEDWRITABLECABLEREQUESTTYPE_MRJ21_TRUNK PatchedWritableCableRequestType = "mrj21-trunk"
	PATCHEDWRITABLECABLEREQUESTTYPE_COAXIAL     PatchedWritableCableRequestType = "coaxial"
	PATCHEDWRITABLECABLEREQUESTTYPE_MMF         PatchedWritableCableRequestType = "mmf"
	PATCHEDWRITABLECABLEREQUESTTYPE_MMF_OM1     PatchedWritableCableRequestType = "mmf-om1"
	PATCHEDWRITABLECABLEREQUESTTYPE_MMF_OM2     PatchedWritableCableRequestType = "mmf-om2"
	PATCHEDWRITABLECABLEREQUESTTYPE_MMF_OM3     PatchedWritableCableRequestType = "mmf-om3"
	PATCHEDWRITABLECABLEREQUESTTYPE_MMF_OM4     PatchedWritableCableRequestType = "mmf-om4"
	PATCHEDWRITABLECABLEREQUESTTYPE_MMF_OM5     PatchedWritableCableRequestType = "mmf-om5"
	PATCHEDWRITABLECABLEREQUESTTYPE_SMF         PatchedWritableCableRequestType = "smf"
	PATCHEDWRITABLECABLEREQUESTTYPE_SMF_OS1     PatchedWritableCableRequestType = "smf-os1"
	PATCHEDWRITABLECABLEREQUESTTYPE_SMF_OS2     PatchedWritableCableRequestType = "smf-os2"
	PATCHEDWRITABLECABLEREQUESTTYPE_AOC         PatchedWritableCableRequestType = "aoc"
	PATCHEDWRITABLECABLEREQUESTTYPE_POWER       PatchedWritableCableRequestType = "power"
	PATCHEDWRITABLECABLEREQUESTTYPE_EMPTY       PatchedWritableCableRequestType = ""
)

// All allowed values of PatchedWritableCableRequestType enum
var AllowedPatchedWritableCableRequestTypeEnumValues = []PatchedWritableCableRequestType{
	"cat3",
	"cat5",
	"cat5e",
	"cat6",
	"cat6a",
	"cat7",
	"cat7a",
	"cat8",
	"dac-active",
	"dac-passive",
	"mrj21-trunk",
	"coaxial",
	"mmf",
	"mmf-om1",
	"mmf-om2",
	"mmf-om3",
	"mmf-om4",
	"mmf-om5",
	"smf",
	"smf-os1",
	"smf-os2",
	"aoc",
	"power",
	"",
}

func (v *PatchedWritableCableRequestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PatchedWritableCableRequestType(value)
	for _, existing := range AllowedPatchedWritableCableRequestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PatchedWritableCableRequestType", value)
}

// NewPatchedWritableCableRequestTypeFromValue returns a pointer to a valid PatchedWritableCableRequestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPatchedWritableCableRequestTypeFromValue(v string) (*PatchedWritableCableRequestType, error) {
	ev := PatchedWritableCableRequestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PatchedWritableCableRequestType: valid values are %v", v, AllowedPatchedWritableCableRequestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PatchedWritableCableRequestType) IsValid() bool {
	for _, existing := range AllowedPatchedWritableCableRequestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PatchedWritableCableRequest_type value
func (v PatchedWritableCableRequestType) Ptr() *PatchedWritableCableRequestType {
	return &v
}

type NullablePatchedWritableCableRequestType struct {
	value *PatchedWritableCableRequestType
	isSet bool
}

func (v NullablePatchedWritableCableRequestType) Get() *PatchedWritableCableRequestType {
	return v.value
}

func (v *NullablePatchedWritableCableRequestType) Set(val *PatchedWritableCableRequestType) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedWritableCableRequestType) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedWritableCableRequestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedWritableCableRequestType(val *PatchedWritableCableRequestType) *NullablePatchedWritableCableRequestType {
	return &NullablePatchedWritableCableRequestType{value: val, isSet: true}
}

func (v NullablePatchedWritableCableRequestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedWritableCableRequestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
