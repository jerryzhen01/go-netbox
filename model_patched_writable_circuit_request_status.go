/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.9 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// PatchedWritableCircuitRequestStatus * `planned` - Planned * `provisioning` - Provisioning * `active` - Active * `offline` - Offline * `deprovisioning` - Deprovisioning * `decommissioned` - Decommissioned
type PatchedWritableCircuitRequestStatus string

// List of PatchedWritableCircuitRequest_status
const (
	PATCHEDWRITABLECIRCUITREQUESTSTATUS_PLANNED        PatchedWritableCircuitRequestStatus = "planned"
	PATCHEDWRITABLECIRCUITREQUESTSTATUS_PROVISIONING   PatchedWritableCircuitRequestStatus = "provisioning"
	PATCHEDWRITABLECIRCUITREQUESTSTATUS_ACTIVE         PatchedWritableCircuitRequestStatus = "active"
	PATCHEDWRITABLECIRCUITREQUESTSTATUS_OFFLINE        PatchedWritableCircuitRequestStatus = "offline"
	PATCHEDWRITABLECIRCUITREQUESTSTATUS_DEPROVISIONING PatchedWritableCircuitRequestStatus = "deprovisioning"
	PATCHEDWRITABLECIRCUITREQUESTSTATUS_DECOMMISSIONED PatchedWritableCircuitRequestStatus = "decommissioned"
)

// All allowed values of PatchedWritableCircuitRequestStatus enum
var AllowedPatchedWritableCircuitRequestStatusEnumValues = []PatchedWritableCircuitRequestStatus{
	"planned",
	"provisioning",
	"active",
	"offline",
	"deprovisioning",
	"decommissioned",
}

func (v *PatchedWritableCircuitRequestStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PatchedWritableCircuitRequestStatus(value)
	for _, existing := range AllowedPatchedWritableCircuitRequestStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PatchedWritableCircuitRequestStatus", value)
}

// NewPatchedWritableCircuitRequestStatusFromValue returns a pointer to a valid PatchedWritableCircuitRequestStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPatchedWritableCircuitRequestStatusFromValue(v string) (*PatchedWritableCircuitRequestStatus, error) {
	ev := PatchedWritableCircuitRequestStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PatchedWritableCircuitRequestStatus: valid values are %v", v, AllowedPatchedWritableCircuitRequestStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PatchedWritableCircuitRequestStatus) IsValid() bool {
	for _, existing := range AllowedPatchedWritableCircuitRequestStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PatchedWritableCircuitRequest_status value
func (v PatchedWritableCircuitRequestStatus) Ptr() *PatchedWritableCircuitRequestStatus {
	return &v
}

type NullablePatchedWritableCircuitRequestStatus struct {
	value *PatchedWritableCircuitRequestStatus
	isSet bool
}

func (v NullablePatchedWritableCircuitRequestStatus) Get() *PatchedWritableCircuitRequestStatus {
	return v.value
}

func (v *NullablePatchedWritableCircuitRequestStatus) Set(val *PatchedWritableCircuitRequestStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedWritableCircuitRequestStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedWritableCircuitRequestStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedWritableCircuitRequestStatus(val *PatchedWritableCircuitRequestStatus) *NullablePatchedWritableCircuitRequestStatus {
	return &NullablePatchedWritableCircuitRequestStatus{value: val, isSet: true}
}

func (v NullablePatchedWritableCircuitRequestStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedWritableCircuitRequestStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
